apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservation-worker
  namespace: tacos-app
  labels:
    app: reservation-worker
    tier: worker
    workload-type: general
    app.kubernetes.io/name: reservation-worker
    app.kubernetes.io/part-of: traffic-tacos
spec:
  # replicas: 1  # KEDA ScaledObject가 관리하므로 비활성화
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: reservation-worker
  template:
    metadata:
      labels:
        app: reservation-worker
        tier: worker
        workload-type: general
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: workload-type
                operator: In
                values:
                - general
              - key: node-type
                operator: In
                values:
                - mix
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - reservation-worker
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: karpenter.sh/capacity-type
        operator: Equal
        value: spot
        effect: NoSchedule
      - key: node.karpenter.sh/initializing
        operator: Exists
        effect: NoSchedule
      
      serviceAccountName: reservation-worker-sa
      
      containers:
      - name: reservation-worker
        image: 137406935518.dkr.ecr.ap-northeast-2.amazonaws.com/traffic-tacos-reservation-worker:b685e0a
        imagePullPolicy: Always
        
        ports:
        - name: http-metrics
          containerPort: 8040
          protocol: TCP
        - name: grpc-debug
          containerPort: 8041
          protocol: TCP
        
        env:
        # AWS Configuration (IRSA를 통해 자동 인증)
        # AWS_PROFILE을 설정하지 않음 (IRSA가 자동으로 인증)
        - name: AWS_REGION
          value: ap-northeast-2
        
        # SQS Configuration
        - name: SQS_QUEUE_URL
          value: https://sqs.ap-northeast-2.amazonaws.com/137406935518/traffic-tacos-reservation-events
        - name: SQS_WAIT_TIME
          value: "20"
        - name: SQS_REGION
          value: ap-northeast-2
        
        # Worker Configuration
        - name: WORKER_CONCURRENCY
          value: "20"
        - name: MAX_RETRIES
          value: "5"
        - name: BACKOFF_BASE_MS
          value: "1000"
        
        # External Services
        - name: INVENTORY_GRPC_ADDR
          value: inventory-api:8021
        - name: RESERVATION_API_BASE
          value: http://reservation-api:8010
        
        # Observability
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector-collector.otel-collector:4317"
        - name: OTEL_EXPORTER_OTLP_PROTOCOL
          value: "grpc"
        - name: OTEL_EXPORTER_OTLP_INSECURE
          value: "true"
        - name: LOG_LEVEL
          value: "info"
        
        # Server Configuration
        - name: SERVER_PORT
          value: "8040"
        - name: GRPC_DEBUG_PORT
          value: "8041"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8040
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8040
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3