apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-script-for-test
  namespace: load-test
  labels:
    app.kubernetes.io/name: load-test-cm
    app.kubernetes.io/component: load-test
data:
  script.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate } from 'k6/metrics';

    // 실패율을 별도 메트릭으로 추적
    export const errorRate = new Rate('http_failures_rate');

    export const options = {
      tags: {
        testid: 'quickpizza-demo',
      },
      scenarios: {
        success_flow: {
          executor: 'constant-arrival-rate',
          rate: 1000,         // 초당 1000 RPS
          timeUnit: '1s',
          duration: '1m',
          preAllocatedVUs: 200,
          maxVUs: 400,
          exec: 'successFlow',
          tags: { scenario: 'success' },
        },
        fail_flow: {
          executor: 'constant-arrival-rate',
          rate: 200,          // 초당 200 RPS 실패 요청
          timeUnit: '1s',
          duration: '1m',
          preAllocatedVUs: 50,
          maxVUs: 100,
          exec: 'failFlow',
          tags: { scenario: 'fail' },
        },
      },
      thresholds: {
        http_req_duration: ['p(95)<1000'],
        http_failures_rate: ['rate<0.1'], // 실패율 10% 미만
      },
    };

    // 성공 시나리오: 정상 페이지 호출
    export function successFlow() {
      const res = http.get('https://quickpizza.grafana.com');
      const ok = check(res, {
        'status is 200': (r) => r.status === 200,
      });
      errorRate.add(!ok); // 200 아닐 시 실패로 기록
      sleep(0.1);
    }

    // 실패 시나리오: 존재하지 않는 페이지 호출
    export function failFlow() {
      const res = http.get('https://quickpizza.grafana.com/nonexistent-' + Math.random());
      const ok = check(res, {
        'status is 404': (r) => r.status === 404, // 의도적으로 404
      });
      errorRate.add(!ok); // 404 외의 상태는 실패
      sleep(0.1);
    }
