apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-script-for-v1test
  namespace: loadtest
  labels:
    app.kubernetes.io/name: loadtest
data:
  script.js: |
    import http from 'k6/http';
    import { group, sleep, check, fail } from 'k6';

    export const options = {
      tags: { test_suite: 'traffic-tacos' },
      thresholds: {
        http_req_failed: ['rate<0.03'],         // 실패율 < 3%
        http_req_duration: ['p(95)<800'],       // p95 < 800ms
      },
      scenarios: {
        // 1) 예약 시작했다가 중간 이탈 (탐색형 트래픽)
        abandon_flow: {
          executor: 'ramping-arrival-rate',
          startRate: 5,
          timeUnit: '1s',
          preAllocatedVUs: 20,
          maxVUs: 200,
          stages: [
            { target: 80, duration: '2m' },
            { target: 80, duration: '3m' },
            { target: 0,  duration: '1m' },
          ],
          tags: { scenario: 'abandon' },
          exec: 'startAndLeave',
        },

        // 2) 정상 예약 + 결제 성공 (완주형 트랜잭션)
        purchase_ok: {
          executor: 'ramping-vus',
          startVUs: 0,
          stages: [
            { target: 50, duration: '2m' },
            { target: 50, duration: '3m' },
            { target: 0,  duration: '1m' },
          ],
          tags: { scenario: 'purchase_ok' },
          exec: 'purchaseSuccess',
        },

        // 3) 결제 실패(카드한도/임의에러 시뮬레이션)
        purchase_fail: {
          executor: 'constant-arrival-rate',
          rate: 20,
          timeUnit: '1s',
          duration: '6m',
          preAllocatedVUs: 20,
          maxVUs: 200,
          tags: { scenario: 'purchase_fail' },
          exec: 'purchaseFail',
        },
      },
    };

    const BASE = __ENV.TARGET_BASE_URL || 'https://traffictacos.store';

    export function startAndLeave() {
      group('browse_and_quit', () => {
        const r1 = http.get(`${BASE}/events`);
        check(r1, { 'list ok': (res) => res.status === 200 });
        sleep(Math.random() * 2);

        const r2 = http.get(`${BASE}/events/12345`);
        check(r2, { 'detail ok': (res) => res.status === 200 });
        // 이탈 (예약/결제는 수행하지 않음)
        sleep(Math.random() * 3);
      });
    }

    function pickSeat() {
      const r = http.post(`${BASE}/reservations/start`, JSON.stringify({ eventId: 12345 }), {
        headers: { 'Content-Type': 'application/json' },
      });
      check(r, { 'start 201': (res) => res.status === 201 });
      const rid = r.json('reservationId');
      const seat = Math.floor(Math.random() * 1000) + 1;
      const s = http.post(`${BASE}/reservations/${rid}/select`, JSON.stringify({ seat }), {
        headers: { 'Content-Type': 'application/json' },
      });
      check(s, { 'seat 200': (res) => res.status === 200 });
      return rid;
    }

    export function purchaseSuccess() {
      group('purchase_ok', () => {
        const rid = pickSeat();
        const pay = http.post(`${BASE}/payments/${rid}`, JSON.stringify({ method: 'card', amount: 50000 }), {
          headers: { 'Content-Type': 'application/json' },
        });
        check(pay, { 'pay 200': (res) => res.status === 200 });
        sleep(1);
      });
    }

    export function purchaseFail() {
      group('purchase_fail', () => {
        const rid = pickSeat();
        // 의도적 실패: 잘못된 카드번호 or 서버가 4xx/5xx 반환하는 엔드포인트로 호출
        const pay = http.post(`${BASE}/payments/${rid}`, JSON.stringify({ method: 'card', amount: 99999999, forceFail: true }), {
          headers: { 'Content-Type': 'application/json' },
        });
        // 실패율/상태코드 관찰
        check(pay, {
          'pay failed (>=400)': (res) => res.status >= 400,
        }) || fail(`Expected failure but got status=${pay.status}`);
        sleep(1);
      });
    }
