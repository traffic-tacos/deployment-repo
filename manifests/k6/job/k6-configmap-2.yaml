apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-script-for-test-2
  namespace: load-test
  labels:
    app.kubernetes.io/name: load-test-cm
    app.kubernetes.io/component: load-test
data:
  script.js: |
    //테스트시간 30s, 총 요청수 3만, 성공 24000, 실패 6000
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate } from 'k6/metrics';

    export const errorRate = new Rate('http_failures_rate');

    export const options = {
      //tags: {
      //  testid: 'test-demo-2',
      //},
      scenarios: {
        // 성공 시나리오: 정상 페이지 요청
        success_flow: {
          executor: 'constant-arrival-rate',
          rate: 800,           // 초당 800 RPS
          timeUnit: '1s',
          duration: '30s',     // 30초간 실행
          preAllocatedVUs: 170,
          maxVUs: 300,
          exec: 'successFlow',
          tags: { scenario: 'success' },
        },
        // 실패 시나리오: 존재하지 않는 페이지 요청
        fail_flow: {
          executor: 'constant-arrival-rate',
          rate: 200,           // 초당 200 RPS
          timeUnit: '1s',
          duration: '30s',
          preAllocatedVUs: 30,
          maxVUs: 60,
          exec: 'failFlow',
          tags: { scenario: 'fail' },
        },
      },
      thresholds: { 
        // 테스트 Sucess or Fail 기준, 하나라도 실패하면 Fail
        // 1000ms, 2000ms
        'http_req_duration': ['p(95)<1000', 'p(99)<2000'],
        'http_failures_rate': ['rate<0.15'],
        'http_req_duration{scenario:success}': ['p(95)<800'],
        'http_req_duration{scenario:fail}': ['p(95)<1200'],
      },
    };

    // 성공 시나리오: 메인 페이지 호출
    export function successFlow() {
      const res = http.get('https://quickpizza.grafana.com', {
        tags: { name: 'MainPage' },
      });
      
      const ok = check(res, {
        'status is 200': (r) => r.status === 200,
        'response time < 1s': (r) => r.timings.duration < 1000,
      });
      
      errorRate.add(!ok);
      sleep(0.1);
    }

    // 실패 시나리오: 404 에러
    export function failFlow() {
      const randomPath = 'nonexistent-' + Math.random().toString(36).substring(7);
      const res = http.get(`https://quickpizza.grafana.com/${randomPath}`, {
        tags: { name: '404Error' },
      });
      
      const ok = check(res, {
        'status is 404': (r) => r.status === 404,
      });
      
      errorRate.add(!ok);
      sleep(0.1);
    }

    // 테스트 시작/종료 시 실행되는 함수
    export function setup() {
      console.log('Load test started - Total RPS: 1000 (Success: 800, Fail: 200)');
    }

    export function teardown(data) {
      console.log('Load test completed');
    }
