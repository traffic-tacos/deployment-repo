apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservation-api
  namespace: tacos-app
  labels:
    app: reservation-api
    tier: backend
    workload-type: general
    app.kubernetes.io/name: reservation-api
    app.kubernetes.io/part-of: traffic-tacos
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: reservation-api
  template:
    metadata:
      labels:
        app: reservation-api
        tier: backend
        workload-type: general
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: workload-type
                operator: In
                values:
                - general
              - key: node-type
                operator: In
                values:
                - mix
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - reservation-api
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: karpenter.sh/capacity-type
        operator: Equal
        value: spot
        effect: NoSchedule
      - key: node.karpenter.sh/initializing
        operator: Exists
        effect: NoSchedule
      
      serviceAccountName: reservation-api-sa
      
      containers:
      - name: reservation-api
        image: 137406935518.dkr.ecr.ap-northeast-2.amazonaws.com/traffic-tacos-reservation-api:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8010
          protocol: TCP
        - name: grpc
          containerPort: 8011
          protocol: TCP
        
        env:
        # Spring Configuration
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: SERVER_PORT
          value: "8010"
        - name: GRPC_PORT
          value: "8011"
        
        # Redis Configuration
        - name: REDIS_ADDRESS
          value: clustercfg.traffic-tacos-redis.w6eqga.apn2.cache.amazonaws.com:6379
        - name: REDIS_TLS_ENABLED
          value: "true"
        - name: REDIS_TLS_INSECURE_SKIP_VERIFY
          value: "true"
        
        # gRPC Client Configuration (Fixed: correct variable name and port)
        - name: GRPC_INVENTORY_ADDRESS
          value: "static://inventory-api.tacos-app.svc.cluster.local:8021"
        
        # AWS Configuration
        - name: AWS_REGION
          value: "ap-northeast-2"
        
        # DynamoDB Tables
        - name: DYNAMODB_TABLE_RESERVATIONS
          value: "ticket-reservation-reservations"
        - name: DYNAMODB_TABLE_ORDERS
          value: "ticket-reservation-orders"
        - name: DYNAMODB_TABLE_IDEMPOTENCY
          value: "ticket-reservation-idempotency"
        - name: DYNAMODB_TABLE_OUTBOX
          value: "ticket-reservation-outbox"
        
        # EventBridge Configuration
        - name: EVENTBRIDGE_BUS_NAME
          value: "ticket-reservation-events"
        - name: EVENTBRIDGE_SCHEDULER_GROUP
          value: "reservation-expiry"
        
        # JWT Configuration
        - name: JWT_ISSUER_URI
          value: "https://api.traffictacos.store"
        
        # Observability
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector-collector.otel-collector:4318"
        - name: OTEL_EXPORTER_OTLP_PROTOCOL
          value: "http/protobuf"
        - name: OTEL_EXPORTER_OTLP_INSECURE
          value: "true"
        
        # JVM Memory Optimization (Fix memory leak/GC issues)
        - name: JAVA_OPTS
          value: >-
            -javaagent:/app/opentelemetry-javaagent.jar
            -Xms512m
            -Xmx512m
            -XX:+UseG1GC
            -XX:MaxGCPauseMillis=200
            -XX:+UseStringDeduplication
            -XX:MaxMetaspaceSize=128m
            -XX:+HeapDumpOnOutOfMemoryError
            -XX:HeapDumpPath=/tmp/heapdump.hprof
            -XX:+ExitOnOutOfMemoryError
            -Xlog:gc*=info,gc+heap=debug,safepoint=info:stdout:time,uptime,level,tags
            -Djava.security.egd=file:/dev/./urandom

        resources:
          requests:
            cpu: 100m
            memory: 768Mi
          limits:
            cpu: 800m
            memory: 1024Mi
        
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8010
          initialDelaySeconds: 80
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8010
          initialDelaySeconds: 70
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3