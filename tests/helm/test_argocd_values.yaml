# Helm Values Schema Validation Test
# This test validates the ArgoCD Helm values configuration

apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-values-test
  namespace: argocd-test
  labels:
    test.traffic-tacos.com/type: helm-validation
    test.traffic-tacos.com/component: argocd
data:
  test-script.sh: |
    #!/bin/bash
    set -e

    echo "=== ArgoCD Helm Values Validation Test ==="

    # Test 1: Validate Helm values file syntax
    echo "1. Validating YAML syntax..."
    yq eval '.' helm-values/argocd-prod-values.yaml > /dev/null
    echo "✅ YAML syntax valid"

    # Test 2: Required fields validation
    echo "2. Validating required fields..."

    # Check global domain
    DOMAIN=$(yq eval '.global.domain' helm-values/argocd-prod-values.yaml)
    if [[ "$DOMAIN" != "argocd.traffictacos.com" ]]; then
      echo "❌ Invalid domain: $DOMAIN"
      exit 1
    fi
    echo "✅ Domain configuration valid: $DOMAIN"

    # Check server replicas
    REPLICAS=$(yq eval '.server.replicas' helm-values/argocd-prod-values.yaml)
    if [[ "$REPLICAS" -lt 2 ]]; then
      echo "❌ Server replicas too low: $REPLICAS (minimum 2 for HA)"
      exit 1
    fi
    echo "✅ Server replicas valid: $REPLICAS"

    # Check resource limits
    CPU_LIMIT=$(yq eval '.server.resources.limits.cpu' helm-values/argocd-prod-values.yaml)
    MEMORY_LIMIT=$(yq eval '.server.resources.limits.memory' helm-values/argocd-prod-values.yaml)

    if [[ "$CPU_LIMIT" == "null" ]] || [[ "$MEMORY_LIMIT" == "null" ]]; then
      echo "❌ Missing resource limits"
      exit 1
    fi
    echo "✅ Resource limits configured: CPU=$CPU_LIMIT, Memory=$MEMORY_LIMIT"

    # Test 3: Security configuration validation
    echo "3. Validating security configuration..."

    # Check security context
    RUN_AS_NON_ROOT=$(yq eval '.server.securityContext.runAsNonRoot' helm-values/argocd-prod-values.yaml)
    if [[ "$RUN_AS_NON_ROOT" != "true" ]]; then
      echo "❌ Security context not configured for non-root"
      exit 1
    fi
    echo "✅ Non-root security context configured"

    # Check ingress TLS
    TLS_ENABLED=$(yq eval '.server.ingress.tls | length' helm-values/argocd-prod-values.yaml)
    if [[ "$TLS_ENABLED" -eq 0 ]]; then
      echo "❌ TLS not configured for ingress"
      exit 1
    fi
    echo "✅ Ingress TLS configured"

    # Test 4: Validate Helm template rendering
    echo "4. Testing Helm template rendering..."
    helm template argocd argo/argo-cd \
      --values helm-values/argocd-prod-values.yaml \
      --dry-run > /tmp/argocd-rendered.yaml

    if [[ $? -eq 0 ]]; then
      echo "✅ Helm template renders successfully"
    else
      echo "❌ Helm template rendering failed"
      exit 1
    fi

    # Test 5: Validate rendered manifests
    echo "5. Validating rendered manifests..."
    kubectl apply --dry-run=client -f /tmp/argocd-rendered.yaml > /dev/null

    if [[ $? -eq 0 ]]; then
      echo "✅ Rendered manifests are valid"
    else
      echo "❌ Rendered manifests validation failed"
      exit 1
    fi

    echo "=== All ArgoCD Helm values tests passed ✅ ==="

  run-test.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: argocd-values-test
      namespace: argocd-test
      labels:
        test.traffic-tacos.com/type: helm-validation
    spec:
      template:
        metadata:
          labels:
            test.traffic-tacos.com/type: helm-validation
        spec:
          restartPolicy: Never
          containers:
          - name: test-runner
            image: alpine/helm:3.12.0
            command: ["/bin/bash", "/scripts/test-script.sh"]
            volumeMounts:
            - name: test-scripts
              mountPath: /scripts
            - name: helm-values
              mountPath: /helm-values
            env:
            - name: HELM_CACHE_HOME
              value: /tmp/.helm
          volumes:
          - name: test-scripts
            configMap:
              name: argocd-values-test
              defaultMode: 0755
          - name: helm-values
            configMap:
              name: argocd-helm-values  # Will be created with actual values
          backoffLimit: 3