# 2. 메인 Collector (DaemonSet 모드)
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: otel-collector
spec:
  mode: daemonset
  serviceAccount: otel-collector-sa
  updateStrategy:
    rollingUpdate:  
      maxUnavailable: "25%"
  tolerations:
  - operator: "Exists"
  volumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  - name: aws-iam-token
    mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
    readOnly: true
  volumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  - name: aws-iam-token
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          audience: sts.amazonaws.com
          expirationSeconds: 86400
          path: token
  env:
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: spec.nodeName
  - name: KUBE_NODE_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: spec.nodeName
  - name: AWS_ROLE_ARN
    value: "arn:aws:iam::137406935518:role/ticket-cluster-otel-collector-role"
  - name: AWS_WEB_IDENTITY_TOKEN_FILE
    value: "/var/run/secrets/eks.amazonaws.com/serviceaccount/token"
  - name: AWS_STS_REGIONAL_ENDPOINTS
    value: "regional"
  config: |
    receivers:
      kubeletstats:
        collection_interval: 10s
        auth_type: 'serviceAccount'
        endpoint: '${env:K8S_NODE_NAME}:10250'
        insecure_skip_verify: true
        metric_groups:
          - node
          - pod
          - container
        extra_metadata_labels:
          - container.id
        k8s_api_config:
          auth_type: serviceAccount
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Kubernetes 컨테이너 로그 수집
      filelog:
        include:
          - /var/log/pods/*/gateway-api*/*.log
        start_at: end
        include_file_path: true
        include_file_name: false
        operators:
          # Kubernetes CRI 로그 포맷 파싱
          - type: regex_parser
            id: parser-cri
            regex: '^(?P<time>[^\s]+) (?P<stream>stdout|stderr) (?P<logtag>[^\s]+) (?P<log>.*)$'
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          
          # JSON 로그 파싱 (logrus)
          - type: json_parser
            id: parser-json
            parse_from: attributes.log
            parse_to: attributes
            if: 'attributes.log matches "^\\{"'
          
          # Severity 파싱
          - type: severity_parser
            parse_from: attributes.level
            if: 'attributes.level != nil'
            mapping:
              debug: debug
              info: info
              warn: warn
              warning: warn
              error: error
              fatal: fatal
              panic: fatal
          
          # Message를 body로 이동
          - type: move
            from: attributes.msg
            to: body
            if: 'attributes.msg != nil'
          
          # 불필요한 필드 제거
          - type: remove
            field: attributes.time
          - type: remove
            field: attributes.stream
          - type: remove
            field: attributes.logtag
          - type: remove
            field: attributes.log
    processors:
      filter/healthcheck:
        traces:
          span:
            - 'attributes["http.target"] == "/actuator/health/liveness"'
            - 'attributes["http.target"] == "/actuator/health/readiness"'
        logs:
          log_record:
            - 'attributes["http.target"] == "/actuator/health/liveness"'
            - 'attributes["http.target"] == "/actuator/health/readiness"'
      batch:
        send_batch_size: 10000
        timeout: 10s
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          # only retrieve pods running on the same node as the collector
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
            - service.namespace
            - service.name
            - service.version
            - service.instance.id
          labels:
              # This label extraction rule takes the value 'app.kubernetes.io/component' label and maps it to the 'app.label.component' attribute which will be added to the associated resources
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
          otel_annotations: true
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: connection
    exporters:
      awsxray:
        # 중요: AWS 리전을 수정하세요
        region: "ap-northeast-2"
        endpoint: "https://xray.ap-northeast-2.amazonaws.com"
      prometheusremotewrite:
        # 중요: AMP Remote Write 엔드포인트를 수정하세요
        endpoint: "https://aps-workspaces.ap-northeast-2.amazonaws.com/workspaces/ws-ec1155d6-1ea8-4822-b9e9-fdec9424dcb9/api/v1/remote_write"
        resource_to_telemetry_conversion:
          enabled: true
        auth:
          authenticator: sigv4auth
      awscloudwatchlogs:
        log_group_name: "/aws/otel/tacos-logs"
        log_stream_name: "otel-logs"
        endpoint: "https://logs.ap-northeast-2.amazonaws.com"
        region: "ap-northeast-2"
        log_retention: 365
        raw_log: false
      # 디버깅을 위한 내부 메트릭 노출
      prometheus:
        endpoint: "0.0.0.0:8889"
      debug:
        verbosity: detailed
    extensions:
      sigv4auth: 
        assume_role: 
          arn: "arn:aws:iam::137406935518:role/ticket-cluster-otel-collector-role"
          sts_region: "ap-northeast-2"
          web_identity_token_file: "/var/run/secrets/eks.amazonaws.com/serviceaccount/token"
    service:
      extensions: [sigv4auth]
      telemetry:
        logs:
          level: "debug"
      pipelines:
        logs/otel:
          receivers: [otlp, filelog]
          processors: [filter/healthcheck, k8sattributes, batch]
          exporters: [awscloudwatchlogs]
        logs/debugging:
          receivers: [otlp]
          processors: [filter/healthcheck, k8sattributes]
          exporters: [debug]
        traces:
          receivers: [otlp]
          processors: [filter/healthcheck, k8sattributes, batch]
          exporters: [awsxray]
        metrics/kubeletstats:
          receivers: [kubeletstats]
          processors: [batch]
          exporters: [prometheusremotewrite]
        metrics/otel:
          receivers: [otlp]
          processors: [k8sattributes, batch]
          exporters: [prometheusremotewrite]
